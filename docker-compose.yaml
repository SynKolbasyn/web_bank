version: "3.9"

services:
  postgres-1:
    hostname: "postgres-1"
    container_name: "postgres-1"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
      dockerfile: "postgres/Dockerfile"
    ports:
      - "5432"
    volumes:
      - "./postgres/postgres_1_data/:/bitnami/postgresql"
    env_file:
      - ".env"
    environment:
      POSTGRESQL_TLS_CERT_FILE: "/tmp/cert.crt"
      POSTGRESQL_TLS_KEY_FILE: "/tmp/key.pem"
      REPMGR_PRIMARY_HOST: "postgres-1"
      REPMGR_PRIMARY_PORT: "5432"
      REPMGR_PARTNER_NODES: "postgres-1,postgres-2:5432,postgres-3:5432"
      REPMGR_NODE_NAME: "postgres-1"
      REPMGR_NODE_NETWORK_NAME: "postgres-1"
      REPMGR_PORT_NUMBER: "5432"
    restart: "always"

  postgres-2:
    hostname: "postgres-2"
    container_name: "postgres-2"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
      dockerfile: "postgres/Dockerfile"
    ports:
      - "5432"
    volumes:
      - "./postgres/postgres_2_data/:/bitnami/postgresql"
    env_file:
      - ".env"
    environment:
      POSTGRESQL_TLS_CERT_FILE: "/tmp/cert.crt"
      POSTGRESQL_TLS_KEY_FILE: "/tmp/key.pem"
      REPMGR_PRIMARY_HOST: "postgres-1"
      REPMGR_PRIMARY_PORT: "5432"
      REPMGR_PARTNER_NODES: "postgres-1,postgres-2:5432,postgres-3:5432"
      REPMGR_NODE_NAME: "postgres-2"
      REPMGR_NODE_NETWORK_NAME: "postgres-2"
      REPMGR_PORT_NUMBER: "5432"
    restart: "always"

  postgres-3:
    hostname: "postgres-3"
    container_name: "postgres-3"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
      dockerfile: "postgres/Dockerfile"
    ports:
      - "5432"
    volumes:
      - "./postgres/postgres_3_data/:/bitnami/postgresql"
    env_file:
      - ".env"
    environment:
      POSTGRESQL_TLS_CERT_FILE: "/tmp/cert.crt"
      POSTGRESQL_TLS_KEY_FILE: "/tmp/key.pem"
      REPMGR_PRIMARY_HOST: "postgres-1"
      REPMGR_PRIMARY_PORT: "5432"
      REPMGR_PARTNER_NODES: "postgres-1,postgres-2:5432,postgres-3:5432"
      REPMGR_NODE_NAME: "postgres-3"
      REPMGR_NODE_NETWORK_NAME: "postgres-3"
      REPMGR_PORT_NUMBER: "5432"
    restart: "always"

  kafka-1:
    image: "bitnami/kafka:3.8"
    hostname: "kafka-1"
    container_name: "kafka-1"
    ports:
      - "9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      # Listeners
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # Clustering
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "3"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "3"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "2"
    volumes:
      - "./kafka/kafka_1_data/:/bitnami/kafka"
    restart: "always"

  kafka-2:
    image: "bitnami/kafka:3.8"
    hostname: "kafka-2"
    container_name: "kafka-2"
    ports:
      - "9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: "2"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      # Listeners
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # Clustering
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "3"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "3"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "2"
    volumes:
      - "./kafka/kafka_2_data/:/bitnami/kafka"
    restart: "always"

  kafka-3:
    image: "bitnami/kafka:3.8"
    hostname: "kafka-3"
    container_name: "kafka-3"
    ports:
      - "9092"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: "3"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      # Listeners
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # Clustering
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "3"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "3"
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: "2"
    volumes:
      - "./kafka/kafka_3_data/:/bitnami/kafka"
    restart: "always"

  nginx:
    hostname: "nginx"
    container_name: "nginx"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
      dockerfile: "nginx/Dockerfile"
    volumes:
      - "./images/:/var/www/images/"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - front_end-1
      - front_end-2
      - front_end-3
    restart: "always"

  front_end-1:
    hostname: "front_end-1"
    container_name: "front_end-1"
    env_file:
      - ".env"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
        config: $CONFIG
      dockerfile: "services/front_end/Dockerfile"
    volumes:
      - "./services/front_end/html/:/front_end/html/"
    ports:
      - "443"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    restart: "always"

  front_end-2:
    hostname: "front_end-2"
    container_name: "front_end-2"
    env_file:
      - ".env"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
        config: $CONFIG
      dockerfile: "services/front_end/Dockerfile"
    volumes:
      - "./services/front_end/html/:/front_end/html/"
    ports:
      - "443"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    restart: "always"

  front_end-3:
    hostname: "front_end-3"
    container_name: "front_end-3"
    env_file:
      - ".env"
    build:
      args:
        country_name: $COUNTRY_NAME
        state_of_province_name: $STATE_OR_PROVINCE_NAME
        locality_name: $LOCALITY_NAME
        organization_name: $ORGANIZATION_NAME
        organizational_unit_name: $ORGANIZATIONAL_UNIT_NAME
        common_name: $COMMON_NAME
        config: $CONFIG
      dockerfile: "services/front_end/Dockerfile"
    volumes:
      - "./services/front_end/html/:/front_end/html/"
    ports:
      - "443"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    restart: "always"

  login-1:
    hostname: "login-1"
    container_name: "login-1"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/login/Dockerfile"

  login-2:
    hostname: "login-2"
    container_name: "login-2"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/login/Dockerfile"

  login-3:
    hostname: "login-3"
    container_name: "login-3"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/login/Dockerfile"

  register-1:
    hostname: "register-1"
    container_name: "register-1"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/register/Dockerfile"

  register-2:
    hostname: "register-2"
    container_name: "register-2"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/register/Dockerfile"

  register-3:
    hostname: "register-3"
    container_name: "register-3"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/register/Dockerfile"

  transfer-1:
    hostname: "transfer-1"
    container_name: "transfer-1"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/transfer/Dockerfile"

  transfer-2:
    hostname: "transfer-2"
    container_name: "transfer-2"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/transfer/Dockerfile"

  transfer-3:
    hostname: "transfer-3"
    container_name: "transfer-3"
    env_file:
      - ".env"
    build:
      args:
        config: $CONFIG
      dockerfile: "services/transfer/Dockerfile"
